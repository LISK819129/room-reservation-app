
declare class Form { 
	type: string 
	toJSON(): any; 
	getField(fieldId: string): any; 
	updateField(args: object): any; 
	getTable(tableId: string): Table; 
}
declare class Table { 
	toJSON(): any; 
	getSelectedRows(): any; 
	getRows(): TableForm[]; 
	getRow(rowId: string): TableForm; 
	addRow(rowObject: object): any; 
	addRows(rows: object[]): any; 
	deleteRow(rowId: string): any; 
	deleteRows(rows: string[]): any; 
}
declare class TableForm { 
	type: string 
	getParent(): Form; 
	toJSON(): any; 
	getField(fieldId: string): any; 
	updateField(args: object): any; 
}
declare class Client { 
	showInfo(message: string | object): any; 
	showConfirm(args: {
            title: string;
            content: string;
            okText: string;
            cancelText: string;
        }): any; 
	redirect(url: string): any; 
}
declare class Formatter { 
	toDate(date: string): any; 
	toDateTime(date: string): any; 
	toNumber(value: string): any; 
	toCurrency(value: string, currencyCode: string): any; 
	toBoolean(value: string): any; 
}
declare class Component { 
	_id: string 
	type: string 
	onMount(callback: Function): void; 
	refresh(): any; 
	/** @deprecated Use condition visibility instead. */
        show(): any; 
	/** @deprecated Use condition visibility instead. */
        hide(): any; 
}
declare class Popup { 
	_id: string 
	type: string 
	getParameter(key: string): any; 
	getAllParameters(): any; 
	close(): any; 
	getComponent(componentId: string): Component; 
}
declare class Page { 
	_id: string 
	popup: Popup 
	type: string 
	getParameter(key: string): any; 
	getAllParameters(): any; 
	getVariable(key: string): any; 
	setVariable(key: string | object, value?: any): any; 
	openPopup(popupId: string, popupParams?: object): any; 
	getComponent(componentId: string): Component; 
}
declare class DecisionTable { 
	evaluate(payload?: object): any; 
}
declare class Dataform { 
	importCSV(defaultValues?: object): any; 
	openForm(item: DataformItem): any; 
}
declare class Board { 
	importCSV(defaultValues?: object): any; 
	openForm(item: BoardItem): any; 
}
declare class Process { 
	openForm(item: ProcessItem): any; 
}
declare class Application { 
	page: Page 
	_id: string 
	getVariable(key: string): any; 
	setVariable(key: string | object, value?: any): any; 
	openPage(pageId: string, pageParams?: object): any; 
	getDecisionTable(flowId: string): DecisionTable; 
	getDataform(flowId: string): Dataform; 
	getBoard(flowId: string): Board; 
	getProcess(flowId: string): Process; 
}
declare class kf { 
	static context: Component 
	static client: Client 
	static formatter: Formatter 
	static app: Application 
	static user: userObject 
	static env: environmentObject 
	static account: accountObject 
	static eventParameters: any 
	static api(url: string, args?: FetchOptions): Promise<any>; 
}
declare type userObject = {
  _id: string;
  Name: string;
  Email: string;
  /** @deprecated Use AppRoles instead. */
  Role: string;
  AppRoles: rolesObject[];
};

declare type rolesObject = {
  _id: string;
  Name: string;
};

declare type accountObject = {
  _id: string;
};

declare type environmentObject = {
  isMobile: boolean;
};

declare type BoardItem = {
  _id: string;
  _view_id: string;
};

declare type DataformItem = {
  _id: string;
};

declare type ProcessItem = {
  _id: string;
  _activity_instance_id: string;
};

declare type FetchOptions = {
  method?: string;
  body?: string | object;
  headers?: object;
};
