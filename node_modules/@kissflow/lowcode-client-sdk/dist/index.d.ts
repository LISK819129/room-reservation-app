declare module "core/constants" {
    export const LISTENER_CMDS: {
        API: string;
        GET_CONTEXT: string;
        RETURN: string;
        GET_FORM_FIELD: string;
        UPDATE_FORM: string;
        GET_TABLE: string;
        GET_TABLE_ROW: string;
        ADD_TABLE_ROW: string;
        ADD_TABLE_ROWS: string;
        DELETE_TABLE_ROW: string;
        TO_JSON: string;
        GET_TABLE_ROWS: string;
        GET_SELECTED_TABLE_ROWS: string;
        MESSAGE: string;
        CONFIRM: string;
        ALERT: string;
        REDIRECT: string;
        OPEN_PAGE: string;
        FORMAT_DATE: string;
        FORMAT_DATE_TIME: string;
        FORMAT_NUMBER: string;
        FORMAT_CURRENCY: string;
        FORMAT_BOOLEAN: string;
        GET_APP_VARIABLE: string;
        SET_APP_VARIABLE: string;
        GET_PAGE_VARIABLE: string;
        SET_PAGE_VARIABLE: string;
        GET_PAGE_PARAMS: string;
        GET_ALL_PAGE_PARAMS: string;
        PAGE_ON_CLOSE: string;
        OPEN_POPUP: string;
        GET_POPUP_PARAMS: string;
        GET_ALL_POPUP_PARAMS: string;
        CLOSE_POPUP: string;
        COMPONENT_GET: string;
        COMPONENT_REFRESH: string;
        COMPONENT_SHOW: string;
        COMPONENT_HIDE: string;
        COMPONENT_ADD_EVENT_LISTENER: string;
        CC_INITIALIZE: string;
        CC_WATCH_PARAMS: string;
        WINDOW_NDEF_READER_NEW: string;
        WINDOW_NDEF_READER_SCAN: string;
        WINDOW_NDEF_READER_WRITE: string;
        WINDOW_NDEF_READER_ADD_EVENT_LISTENER: string;
        WINDOW_NDEF_READER_MAKE_READONLY: string;
        WINDOW_NDEF_READER_ABORT_SCAN: string;
        DECISION_TABLE_EXECUTE: string;
        DATAFORM_IMPORT_CSV: string;
        DATAFORM_OPEN_FORM: string;
        PROCESS_OPEN_FORM: string;
        BOARD_IMPORT_CSV: string;
        BOARD_OPEN_FORM: string;
    };
    export const EVENT_TYPES: {
        COMPONENT_ON_MOUNT: string;
        CC_ON_PARAMS_CHANGE: string;
    };
    export const DEFAULTS: {
        POPUP_ID: string;
    };
}
declare module "core/index" {
    export function generateId(prefix?: string): string;
    export const globalInstances: {};
    export class EventBase {
        #private;
        constructor();
        _addEventListener(eventName: string, callBack: Function): void;
        _removeEventListener(eventName: string, callBack?: any): void;
        _dispatchEvent(eventName: string, eventParams: object): boolean;
        _dispatchMessageEvents(req: any, resp: any): void;
    }
    export class BaseSDK extends EventBase {
        _postMessageAsync(command: string, args: any, hasCallBack?: boolean, callBack?: (data: any) => {}): object | string | any;
        _postMessage(command: string, args: any, callBack?: any): void;
        _postMessageSync(command: string, args: any): any;
    }
    export * from "core/constants";
}
declare module "utils/client" {
    import { BaseSDK } from "core/index";
    export class Client extends BaseSDK {
        showInfo(message: string | object): any;
        showConfirm(args: {
            title: string;
            content: string;
            okText: string;
            cancelText: string;
        }): any;
        redirect(url: string): any;
    }
}
declare module "utils/formatter" {
    import { BaseSDK } from "core/index";
    export class Formatter extends BaseSDK {
        toDate(date: string): any;
        toDateTime(date: string): any;
        toNumber(value: string): any;
        toCurrency(value: string, currencyCode: string): any;
        toBoolean(value: string): any;
    }
}
declare module "utils/index" {
    export * from "utils/client";
    export * from "utils/formatter";
    export const isObject: (value: any) => boolean;
}
declare module "core/proxy" {
    export class CreateProxy {
        path: string[];
        parent: object;
        constructor(parent: object, target?: {}, path?: any[]);
        get(target: object, property: string): any;
        set(target: object, property: string, value: any, reciever: any): any;
    }
}
declare module "types/external" {
    export type userObject = {
        _id: string;
        Name: string;
        Email: string;
        /** @deprecated Use AppRoles instead. */
        Role: string;
        AppRoles: rolesObject[];
    };
    export type rolesObject = {
        _id: string;
        Name: string;
    };
    export type accountObject = {
        _id: string;
    };
    export type environmentObject = {
        isMobile: boolean;
    };
    export type BoardItem = {
        _id: string;
        _view_id: string;
    };
    export type DataformItem = {
        _id: string;
    };
    export type ProcessItem = {
        _id: string;
        _activity_instance_id: string;
    };
    export type FetchOptions = {
        method?: string;
        body?: string | object;
        headers?: object;
    };
}
declare module "types/internal" {
    import { userObject, accountObject, environmentObject } from "types/external";
    export interface SDKContext {
        formInstanceId: string;
        tableId: string;
        tableRowId: string;
        componentId: string;
        componentMethods?: componentMethodsType[];
        appId: string;
        pageId: string;
        popupId: string;
        user: userObject;
        account: accountObject;
        csrfToken: string;
        envDetails: environmentObject;
    }
    export interface componentMethodsType {
        name: string;
        returnType?: string;
        parameters?: string[];
    }
    export interface ComponentProps {
        componentId: string;
        componentMethods?: componentMethodsType[];
    }
    export interface AppContext {
        appId: string;
        pageId: string;
    }
    export interface PageContext {
        pageId: string;
    }
    export interface PopupContext {
        popupId?: string;
    }
}
declare module "app/component" {
    import { BaseSDK } from "core/index";
    import { ComponentProps } from "types/internal";
    export class Component extends BaseSDK {
        #private;
        _id: string;
        type: string;
        constructor(props: ComponentProps);
        onMount(callback: Function): void;
        refresh(): any;
        /** @deprecated Use condition visibility instead. */
        show(): any;
        /** @deprecated Use condition visibility instead. */
        hide(): any;
    }
    export class CustomComponent extends BaseSDK {
        type: string;
        _id: string;
        constructor(id: any);
        watchParams(callBack: (data: any) => any): void;
    }
}
declare module "app/popup" {
    import { BaseSDK } from "core/index";
    import { Component } from "app/component";
    import { PopupContext } from "types/internal";
    export class Popup extends BaseSDK {
        _id: string;
        type: string;
        constructor(props: PopupContext);
        getParameter(key: string): any;
        getAllParameters(): any;
        close(): any;
        getComponent(componentId: string): Component;
    }
}
declare module "app/page" {
    import { BaseSDK } from "core/index";
    import { Component } from "app/component";
    import { Popup } from "app/popup";
    import { PageContext } from "types/internal";
    export class Page extends BaseSDK {
        _id: string;
        popup: Popup;
        type: string;
        constructor(props: PageContext, isCustomComponent?: boolean);
        getParameter(key: string): any;
        getAllParameters(): any;
        getVariable(key: string): any;
        setVariable(key: string | object, value?: any): any;
        openPopup(popupId: string, popupParams?: object): any;
        getComponent(componentId: string): Component;
    }
}
declare module "app/decisiontable" {
    import { BaseSDK } from "core/index";
    export class DecisionTable extends BaseSDK {
        private flowId;
        constructor(flowId: string);
        evaluate(payload?: object): any;
    }
}
declare module "app/dataform" {
    import { BaseSDK } from "core/index";
    import { DataformItem } from "types/external";
    export class Dataform extends BaseSDK {
        private _id;
        constructor(flowId: string);
        importCSV(defaultValues?: object): any;
        openForm(item: DataformItem): any;
    }
}
declare module "board/index" {
    import { BaseSDK } from "core/index";
    import { BoardItem } from "types/external";
    export class Board extends BaseSDK {
        private _id;
        constructor(flowId: string);
        importCSV(defaultValues?: object): any;
        openForm(item: BoardItem): any;
    }
}
declare module "process/index" {
    import { BaseSDK } from "core/index";
    import { ProcessItem } from "types/external";
    export class Process extends BaseSDK {
        private _id;
        constructor(flowId: string);
        openForm(item: ProcessItem): any;
    }
}
declare module "app/index" {
    import { BaseSDK } from "core/index";
    import { Page } from "app/page";
    import { AppContext } from "types/internal";
    import { DecisionTable } from "app/decisiontable";
    import { Dataform } from "app/dataform";
    import { Board } from "board/index";
    import { Process } from "process/index";
    export class Application extends BaseSDK {
        page: Page;
        _id: string;
        constructor(props: AppContext, isCustomComponent?: boolean);
        getVariable(key: string): any;
        setVariable(key: string | object, value?: any): any;
        openPage(pageId: string, pageParams?: object): any;
        getDecisionTable(flowId: string): DecisionTable;
        getDataform(flowId: string): Dataform;
        getBoard(flowId: string): Board;
        getProcess(flowId: string): Process;
    }
    export * from "app/component";
    export { Page };
    export * from "app/popup";
}
declare module "index" {
    import { BaseSDK } from "core/index";
    import { Application, Page, CustomComponent } from "app/index";
    import { Client, Formatter } from "utils/index";
    import { userObject, accountObject, environmentObject } from "types/external";
    class CustomComponentSDK extends BaseSDK {
        app: Application;
        page: Page;
        user: userObject;
        account: accountObject;
        context: CustomComponent;
        client: Client;
        formatter: Formatter;
        env: environmentObject;
        constructor();
        api(url: string, args?: object): string | object;
        initialize(): any;
        initialise(): any;
    }
    const _default: CustomComponentSDK;
    export default _default;
}
declare module "form/index" {
    import { BaseSDK } from "core/index";
    export class Form extends BaseSDK {
        private instanceId;
        type: string;
        constructor(instanceId: string);
        toJSON(): any;
        getField(fieldId: string): any;
        updateField(args: object): any;
        getTable(tableId: string): Table;
    }
    class Table extends BaseSDK {
        private tableId;
        private instanceId;
        constructor(instanceId: string, tableId: string);
        toJSON(): any;
        getSelectedRows(): any;
        getRows(): TableForm[];
        getRow(rowId: string): TableForm;
        addRow(rowObject: object): any;
        addRows(rows: object[]): any;
        deleteRow(rowId: string): any;
        deleteRows(rows: string[]): any;
    }
    export class TableForm extends BaseSDK {
        private instanceId;
        private tableId;
        private rowId;
        type: string;
        constructor(instanceId: string, tableId: string, rowId: string);
        getParent(): Form;
        toJSON(): any;
        getField(fieldId: string): any;
        updateField(args: object): any;
    }
}
declare module "window/NDEFReader" {
    import { BaseSDK } from "core/index";
    export class NDEFReader extends BaseSDK {
        id: string;
        constructor();
        scan(): Promise<unknown>;
        write(data: any): Promise<unknown>;
        addEventListener(eventName: string, cb: Function): void;
        makeReadOnly(): Promise<unknown>;
        abortScan(): Promise<unknown>;
    }
}
declare module "window/index" {
    import { NDEFReader } from "window/NDEFReader";
    export const window: {
        NDEFReader: typeof NDEFReader;
    };
}
